// Generated by view binder compiler. Do not edit!
package com.project.sparkwomen.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.project.sparkwomen.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityLawDisplayerBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button backBtn;

  @NonNull
  public final TextView bigLaws;

  @NonNull
  public final View closeBtn;

  @NonNull
  public final ImageView imgLaw;

  @NonNull
  public final LinearLayout lastLinear;

  @NonNull
  public final TextView lawString;

  @NonNull
  public final Button nextBtn;

  @NonNull
  public final View topleftoval;

  private ActivityLawDisplayerBinding(@NonNull RelativeLayout rootView, @NonNull Button backBtn,
      @NonNull TextView bigLaws, @NonNull View closeBtn, @NonNull ImageView imgLaw,
      @NonNull LinearLayout lastLinear, @NonNull TextView lawString, @NonNull Button nextBtn,
      @NonNull View topleftoval) {
    this.rootView = rootView;
    this.backBtn = backBtn;
    this.bigLaws = bigLaws;
    this.closeBtn = closeBtn;
    this.imgLaw = imgLaw;
    this.lastLinear = lastLinear;
    this.lawString = lawString;
    this.nextBtn = nextBtn;
    this.topleftoval = topleftoval;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityLawDisplayerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityLawDisplayerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_law_displayer, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityLawDisplayerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backBtn;
      Button backBtn = ViewBindings.findChildViewById(rootView, id);
      if (backBtn == null) {
        break missingId;
      }

      id = R.id.bigLaws;
      TextView bigLaws = ViewBindings.findChildViewById(rootView, id);
      if (bigLaws == null) {
        break missingId;
      }

      id = R.id.closeBtn;
      View closeBtn = ViewBindings.findChildViewById(rootView, id);
      if (closeBtn == null) {
        break missingId;
      }

      id = R.id.imgLaw;
      ImageView imgLaw = ViewBindings.findChildViewById(rootView, id);
      if (imgLaw == null) {
        break missingId;
      }

      id = R.id.lastLinear;
      LinearLayout lastLinear = ViewBindings.findChildViewById(rootView, id);
      if (lastLinear == null) {
        break missingId;
      }

      id = R.id.lawString;
      TextView lawString = ViewBindings.findChildViewById(rootView, id);
      if (lawString == null) {
        break missingId;
      }

      id = R.id.nextBtn;
      Button nextBtn = ViewBindings.findChildViewById(rootView, id);
      if (nextBtn == null) {
        break missingId;
      }

      id = R.id.topleftoval;
      View topleftoval = ViewBindings.findChildViewById(rootView, id);
      if (topleftoval == null) {
        break missingId;
      }

      return new ActivityLawDisplayerBinding((RelativeLayout) rootView, backBtn, bigLaws, closeBtn,
          imgLaw, lastLinear, lawString, nextBtn, topleftoval);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
